Interrogator {
    dialects: [
        Dialect {
            id: Url(
                Url {
                    scheme: "https",
                    cannot_be_a_base: false,
                    username: "",
                    password: None,
                    host: Some(
                        Domain(
                            "json-schema.org",
                        ),
                    ),
                    port: None,
                    path: "/draft/2020-12/schema",
                    query: None,
                    fragment: None,
                },
            ),
            meta_schemas: {
                Url(
                    Url {
                        scheme: "https",
                        cannot_be_a_base: false,
                        username: "",
                        password: None,
                        host: Some(
                            Domain(
                                "json-schema.org",
                            ),
                        ),
                        port: None,
                        path: "/draft/2020-12/meta/format-assertion",
                        query: None,
                        fragment: None,
                    },
                ): {
                    "$dynamicAnchor": String("meta"),
                    "$id": String("https://json-schema.org/draft/2020-12/meta/format-annotation"),
                    "$schema": String("https://json-schema.org/draft/2020-12/schema"),
                    "$vocabulary": Object {
                        "https://json-schema.org/draft/2020-12/vocab/format-annotation": Bool(true),
                    },
                    "properties": Object {
                        "format": Object {
                            "type": String("string"),
                        },
                    },
                    "title": String("Format vocabulary meta-schema for annotation results"),
                    "type": Array [
                        String("object"),
                        String("boolean"),
                    ],
                },
                Url(
                    Url {
                        scheme: "https",
                        cannot_be_a_base: false,
                        username: "",
                        password: None,
                        host: Some(
                            Domain(
                                "json-schema.org",
                            ),
                        ),
                        port: None,
                        path: "/draft/2020-12/meta/core",
                        query: None,
                        fragment: None,
                    },
                ): {
                    "$defs": Object {
                        "anchorString": Object {
                            "pattern": String("^[A-Za-z_][-A-Za-z0-9._]*$"),
                            "type": String("string"),
                        },
                        "uriReferenceString": Object {
                            "format": String("uri-reference"),
                            "type": String("string"),
                        },
                        "uriString": Object {
                            "format": String("uri"),
                            "type": String("string"),
                        },
                    },
                    "$dynamicAnchor": String("meta"),
                    "$id": String("https://json-schema.org/draft/2020-12/meta/core"),
                    "$schema": String("https://json-schema.org/draft/2020-12/schema"),
                    "$vocabulary": Object {
                        "https://json-schema.org/draft/2020-12/vocab/core": Bool(true),
                    },
                    "properties": Object {
                        "$anchor": Object {
                            "$ref": String("#/$defs/anchorString"),
                        },
                        "$comment": Object {
                            "type": String("string"),
                        },
                        "$defs": Object {
                            "additionalProperties": Object {
                                "$dynamicRef": String("#meta"),
                            },
                            "type": String("object"),
                        },
                        "$dynamicAnchor": Object {
                            "$ref": String("#/$defs/anchorString"),
                        },
                        "$dynamicRef": Object {
                            "$ref": String("#/$defs/uriReferenceString"),
                        },
                        "$id": Object {
                            "$comment": String("Non-empty fragments not allowed."),
                            "$ref": String("#/$defs/uriReferenceString"),
                            "pattern": String("^[^#]*#?$"),
                        },
                        "$ref": Object {
                            "$ref": String("#/$defs/uriReferenceString"),
                        },
                        "$schema": Object {
                            "$ref": String("#/$defs/uriString"),
                        },
                        "$vocabulary": Object {
                            "additionalProperties": Object {
                                "type": String("boolean"),
                            },
                            "propertyNames": Object {
                                "$ref": String("#/$defs/uriString"),
                            },
                            "type": String("object"),
                        },
                    },
                    "title": String("Core vocabulary meta-schema"),
                    "type": Array [
                        String("object"),
                        String("boolean"),
                    ],
                },
                Url(
                    Url {
                        scheme: "https",
                        cannot_be_a_base: false,
                        username: "",
                        password: None,
                        host: Some(
                            Domain(
                                "json-schema.org",
                            ),
                        ),
                        port: None,
                        path: "/draft/2020-12/meta/unevaluated",
                        query: None,
                        fragment: None,
                    },
                ): {
                    "$dynamicAnchor": String("meta"),
                    "$id": String("https://json-schema.org/draft/2020-12/meta/unevaluated"),
                    "$schema": String("https://json-schema.org/draft/2020-12/schema"),
                    "$vocabulary": Object {
                        "https://json-schema.org/draft/2020-12/vocab/unevaluated": Bool(true),
                    },
                    "properties": Object {
                        "unevaluatedItems": Object {
                            "$dynamicRef": String("#meta"),
                        },
                        "unevaluatedProperties": Object {
                            "$dynamicRef": String("#meta"),
                        },
                    },
                    "title": String("Unevaluated applicator vocabulary meta-schema"),
                    "type": Array [
                        String("object"),
                        String("boolean"),
                    ],
                },
                Url(
                    Url {
                        scheme: "https",
                        cannot_be_a_base: false,
                        username: "",
                        password: None,
                        host: Some(
                            Domain(
                                "json-schema.org",
                            ),
                        ),
                        port: None,
                        path: "/draft/2020-12/meta/applicator",
                        query: None,
                        fragment: None,
                    },
                ): {
                    "$defs": Object {
                        "schemaArray": Object {
                            "items": Object {
                                "$dynamicRef": String("#meta"),
                            },
                            "minItems": Number(1),
                            "type": String("array"),
                        },
                    },
                    "$dynamicAnchor": String("meta"),
                    "$id": String("https://json-schema.org/draft/2020-12/meta/applicator"),
                    "$schema": String("https://json-schema.org/draft/2020-12/schema"),
                    "$vocabulary": Object {
                        "https://json-schema.org/draft/2020-12/vocab/applicator": Bool(true),
                    },
                    "properties": Object {
                        "additionalProperties": Object {
                            "$dynamicRef": String("#meta"),
                        },
                        "allOf": Object {
                            "$ref": String("#/$defs/schemaArray"),
                        },
                        "anyOf": Object {
                            "$ref": String("#/$defs/schemaArray"),
                        },
                        "contains": Object {
                            "$dynamicRef": String("#meta"),
                        },
                        "dependentSchemas": Object {
                            "additionalProperties": Object {
                                "$dynamicRef": String("#meta"),
                            },
                            "default": Object {},
                            "type": String("object"),
                        },
                        "else": Object {
                            "$dynamicRef": String("#meta"),
                        },
                        "if": Object {
                            "$dynamicRef": String("#meta"),
                        },
                        "items": Object {
                            "$dynamicRef": String("#meta"),
                        },
                        "not": Object {
                            "$dynamicRef": String("#meta"),
                        },
                        "oneOf": Object {
                            "$ref": String("#/$defs/schemaArray"),
                        },
                        "patternProperties": Object {
                            "additionalProperties": Object {
                                "$dynamicRef": String("#meta"),
                            },
                            "default": Object {},
                            "propertyNames": Object {
                                "format": String("regex"),
                            },
                            "type": String("object"),
                        },
                        "prefixItems": Object {
                            "$ref": String("#/$defs/schemaArray"),
                        },
                        "properties": Object {
                            "additionalProperties": Object {
                                "$dynamicRef": String("#meta"),
                            },
                            "default": Object {},
                            "type": String("object"),
                        },
                        "propertyNames": Object {
                            "$dynamicRef": String("#meta"),
                        },
                        "then": Object {
                            "$dynamicRef": String("#meta"),
                        },
                    },
                    "title": String("Applicator vocabulary meta-schema"),
                    "type": Array [
                        String("object"),
                        String("boolean"),
                    ],
                },
                Url(
                    Url {
                        scheme: "https",
                        cannot_be_a_base: false,
                        username: "",
                        password: None,
                        host: Some(
                            Domain(
                                "json-schema.org",
                            ),
                        ),
                        port: None,
                        path: "/draft/2020-12/meta/format-annotation",
                        query: None,
                        fragment: None,
                    },
                ): {
                    "$dynamicAnchor": String("meta"),
                    "$id": String("https://json-schema.org/draft/2020-12/meta/format-annotation"),
                    "$schema": String("https://json-schema.org/draft/2020-12/schema"),
                    "$vocabulary": Object {
                        "https://json-schema.org/draft/2020-12/vocab/format-annotation": Bool(true),
                    },
                    "properties": Object {
                        "format": Object {
                            "type": String("string"),
                        },
                    },
                    "title": String("Format vocabulary meta-schema for annotation results"),
                    "type": Array [
                        String("object"),
                        String("boolean"),
                    ],
                },
                Url(
                    Url {
                        scheme: "https",
                        cannot_be_a_base: false,
                        username: "",
                        password: None,
                        host: Some(
                            Domain(
                                "json-schema.org",
                            ),
                        ),
                        port: None,
                        path: "/draft/2020-12/meta/validation",
                        query: None,
                        fragment: None,
                    },
                ): {
                    "$defs": Object {
                        "nonNegativeInteger": Object {
                            "minimum": Number(0),
                            "type": String("integer"),
                        },
                        "nonNegativeIntegerDefault0": Object {
                            "$ref": String("#/$defs/nonNegativeInteger"),
                            "default": Number(0),
                        },
                        "simpleTypes": Object {
                            "enum": Array [
                                String("array"),
                                String("boolean"),
                                String("integer"),
                                String("null"),
                                String("number"),
                                String("object"),
                                String("string"),
                            ],
                        },
                        "stringArray": Object {
                            "default": Array [],
                            "items": Object {
                                "type": String("string"),
                            },
                            "type": String("array"),
                            "uniqueItems": Bool(true),
                        },
                    },
                    "$dynamicAnchor": String("meta"),
                    "$id": String("https://json-schema.org/draft/2020-12/meta/validation"),
                    "$schema": String("https://json-schema.org/draft/2020-12/schema"),
                    "$vocabulary": Object {
                        "https://json-schema.org/draft/2020-12/vocab/validation": Bool(true),
                    },
                    "properties": Object {
                        "const": Bool(true),
                        "dependentRequired": Object {
                            "additionalProperties": Object {
                                "$ref": String("#/$defs/stringArray"),
                            },
                            "type": String("object"),
                        },
                        "enum": Object {
                            "items": Bool(true),
                            "type": String("array"),
                        },
                        "exclusiveMaximum": Object {
                            "type": String("number"),
                        },
                        "exclusiveMinimum": Object {
                            "type": String("number"),
                        },
                        "maxContains": Object {
                            "$ref": String("#/$defs/nonNegativeInteger"),
                        },
                        "maxItems": Object {
                            "$ref": String("#/$defs/nonNegativeInteger"),
                        },
                        "maxLength": Object {
                            "$ref": String("#/$defs/nonNegativeInteger"),
                        },
                        "maxProperties": Object {
                            "$ref": String("#/$defs/nonNegativeInteger"),
                        },
                        "maximum": Object {
                            "type": String("number"),
                        },
                        "minContains": Object {
                            "$ref": String("#/$defs/nonNegativeInteger"),
                            "default": Number(1),
                        },
                        "minItems": Object {
                            "$ref": String("#/$defs/nonNegativeIntegerDefault0"),
                        },
                        "minLength": Object {
                            "$ref": String("#/$defs/nonNegativeIntegerDefault0"),
                        },
                        "minProperties": Object {
                            "$ref": String("#/$defs/nonNegativeIntegerDefault0"),
                        },
                        "minimum": Object {
                            "type": String("number"),
                        },
                        "multipleOf": Object {
                            "exclusiveMinimum": Number(0),
                            "type": String("number"),
                        },
                        "pattern": Object {
                            "format": String("regex"),
                            "type": String("string"),
                        },
                        "required": Object {
                            "$ref": String("#/$defs/stringArray"),
                        },
                        "type": Object {
                            "anyOf": Array [
                                Object {
                                    "$ref": String("#/$defs/simpleTypes"),
                                },
                                Object {
                                    "items": Object {
                                        "$ref": String("#/$defs/simpleTypes"),
                                    },
                                    "minItems": Number(1),
                                    "type": String("array"),
                                    "uniqueItems": Bool(true),
                                },
                            ],
                        },
                        "uniqueItems": Object {
                            "default": Bool(false),
                            "type": String("boolean"),
                        },
                    },
                    "title": String("Validation vocabulary meta-schema"),
                    "type": Array [
                        String("object"),
                        String("boolean"),
                    ],
                },
                Url(
                    Url {
                        scheme: "https",
                        cannot_be_a_base: false,
                        username: "",
                        password: None,
                        host: Some(
                            Domain(
                                "json-schema.org",
                            ),
                        ),
                        port: None,
                        path: "/draft/2020-12/schema",
                        query: None,
                        fragment: None,
                    },
                ): {
                    "$comment": String("This meta-schema also defines keywords that have appeared in previous drafts in order to prevent incompatible extensions as they remain in common use."),
                    "$dynamicAnchor": String("meta"),
                    "$id": String("https://json-schema.org/draft/2020-12/schema"),
                    "$schema": String("https://json-schema.org/draft/2020-12/schema"),
                    "$vocabulary": Object {
                        "https://json-schema.org/draft/2020-12/vocab/applicator": Bool(true),
                        "https://json-schema.org/draft/2020-12/vocab/content": Bool(true),
                        "https://json-schema.org/draft/2020-12/vocab/core": Bool(true),
                        "https://json-schema.org/draft/2020-12/vocab/format-annotation": Bool(true),
                        "https://json-schema.org/draft/2020-12/vocab/meta-data": Bool(true),
                        "https://json-schema.org/draft/2020-12/vocab/unevaluated": Bool(true),
                        "https://json-schema.org/draft/2020-12/vocab/validation": Bool(true),
                    },
                    "allOf": Array [
                        Object {
                            "$ref": String("meta/core"),
                        },
                        Object {
                            "$ref": String("meta/applicator"),
                        },
                        Object {
                            "$ref": String("meta/unevaluated"),
                        },
                        Object {
                            "$ref": String("meta/validation"),
                        },
                        Object {
                            "$ref": String("meta/meta-data"),
                        },
                        Object {
                            "$ref": String("meta/format-annotation"),
                        },
                        Object {
                            "$ref": String("meta/content"),
                        },
                    ],
                    "properties": Object {
                        "$recursiveAnchor": Object {
                            "$comment": String("\"$recursiveAnchor\" has been replaced by \"$dynamicAnchor\"."),
                            "$ref": String("meta/core#/$defs/anchorString"),
                            "deprecated": Bool(true),
                        },
                        "$recursiveRef": Object {
                            "$comment": String("\"$recursiveRef\" has been replaced by \"$dynamicRef\"."),
                            "$ref": String("meta/core#/$defs/uriReferenceString"),
                            "deprecated": Bool(true),
                        },
                        "definitions": Object {
                            "$comment": String("\"definitions\" has been replaced by \"$defs\"."),
                            "additionalProperties": Object {
                                "$dynamicRef": String("#meta"),
                            },
                            "default": Object {},
                            "deprecated": Bool(true),
                            "type": String("object"),
                        },
                        "dependencies": Object {
                            "$comment": String("\"dependencies\" has been split and replaced by \"dependentSchemas\" and \"dependentRequired\" in order to serve their differing semantics."),
                            "additionalProperties": Object {
                                "anyOf": Array [
                                    Object {
                                        "$dynamicRef": String("#meta"),
                                    },
                                    Object {
                                        "$ref": String("meta/validation#/$defs/stringArray"),
                                    },
                                ],
                            },
                            "default": Object {},
                            "deprecated": Bool(true),
                            "type": String("object"),
                        },
                    },
                    "title": String("Core and Validation specifications meta-schema"),
                    "type": Array [
                        String("object"),
                        String("boolean"),
                    ],
                },
                Url(
                    Url {
                        scheme: "https",
                        cannot_be_a_base: false,
                        username: "",
                        password: None,
                        host: Some(
                            Domain(
                                "json-schema.org",
                            ),
                        ),
                        port: None,
                        path: "/draft/2020-12/meta/meta-data",
                        query: None,
                        fragment: None,
                    },
                ): {
                    "$dynamicAnchor": String("meta"),
                    "$id": String("https://json-schema.org/draft/2020-12/meta/meta-data"),
                    "$schema": String("https://json-schema.org/draft/2020-12/schema"),
                    "$vocabulary": Object {
                        "https://json-schema.org/draft/2020-12/vocab/meta-data": Bool(true),
                    },
                    "properties": Object {
                        "default": Bool(true),
                        "deprecated": Object {
                            "default": Bool(false),
                            "type": String("boolean"),
                        },
                        "description": Object {
                            "type": String("string"),
                        },
                        "examples": Object {
                            "items": Bool(true),
                            "type": String("array"),
                        },
                        "readOnly": Object {
                            "default": Bool(false),
                            "type": String("boolean"),
                        },
                        "title": Object {
                            "type": String("string"),
                        },
                        "writeOnly": Object {
                            "default": Bool(false),
                            "type": String("boolean"),
                        },
                    },
                    "title": String("Meta-data vocabulary meta-schema"),
                    "type": Array [
                        String("object"),
                        String("boolean"),
                    ],
                },
            },
            handlers: [
                Sync(
                    ConstHandler {
                        expected: None,
                    },
                ),
            ],
            ..
        },
    ],
    default_dialect: 0,
    sources: {
        Url(
            Url {
                scheme: "https",
                cannot_be_a_base: false,
                username: "",
                password: None,
                host: Some(
                    Domain(
                        "json-schema.org",
                    ),
                ),
                port: None,
                path: "/draft/2020-12/meta/validation",
                query: None,
                fragment: None,
            },
        ): Object {
            "$defs": Object {
                "nonNegativeInteger": Object {
                    "minimum": Number(0),
                    "type": String("integer"),
                },
                "nonNegativeIntegerDefault0": Object {
                    "$ref": String("#/$defs/nonNegativeInteger"),
                    "default": Number(0),
                },
                "simpleTypes": Object {
                    "enum": Array [
                        String("array"),
                        String("boolean"),
                        String("integer"),
                        String("null"),
                        String("number"),
                        String("object"),
                        String("string"),
                    ],
                },
                "stringArray": Object {
                    "default": Array [],
                    "items": Object {
                        "type": String("string"),
                    },
                    "type": String("array"),
                    "uniqueItems": Bool(true),
                },
            },
            "$dynamicAnchor": String("meta"),
            "$id": String("https://json-schema.org/draft/2020-12/meta/validation"),
            "$schema": String("https://json-schema.org/draft/2020-12/schema"),
            "$vocabulary": Object {
                "https://json-schema.org/draft/2020-12/vocab/validation": Bool(true),
            },
            "properties": Object {
                "const": Bool(true),
                "dependentRequired": Object {
                    "additionalProperties": Object {
                        "$ref": String("#/$defs/stringArray"),
                    },
                    "type": String("object"),
                },
                "enum": Object {
                    "items": Bool(true),
                    "type": String("array"),
                },
                "exclusiveMaximum": Object {
                    "type": String("number"),
                },
                "exclusiveMinimum": Object {
                    "type": String("number"),
                },
                "maxContains": Object {
                    "$ref": String("#/$defs/nonNegativeInteger"),
                },
                "maxItems": Object {
                    "$ref": String("#/$defs/nonNegativeInteger"),
                },
                "maxLength": Object {
                    "$ref": String("#/$defs/nonNegativeInteger"),
                },
                "maxProperties": Object {
                    "$ref": String("#/$defs/nonNegativeInteger"),
                },
                "maximum": Object {
                    "type": String("number"),
                },
                "minContains": Object {
                    "$ref": String("#/$defs/nonNegativeInteger"),
                    "default": Number(1),
                },
                "minItems": Object {
                    "$ref": String("#/$defs/nonNegativeIntegerDefault0"),
                },
                "minLength": Object {
                    "$ref": String("#/$defs/nonNegativeIntegerDefault0"),
                },
                "minProperties": Object {
                    "$ref": String("#/$defs/nonNegativeIntegerDefault0"),
                },
                "minimum": Object {
                    "type": String("number"),
                },
                "multipleOf": Object {
                    "exclusiveMinimum": Number(0),
                    "type": String("number"),
                },
                "pattern": Object {
                    "format": String("regex"),
                    "type": String("string"),
                },
                "required": Object {
                    "$ref": String("#/$defs/stringArray"),
                },
                "type": Object {
                    "anyOf": Array [
                        Object {
                            "$ref": String("#/$defs/simpleTypes"),
                        },
                        Object {
                            "items": Object {
                                "$ref": String("#/$defs/simpleTypes"),
                            },
                            "minItems": Number(1),
                            "type": String("array"),
                            "uniqueItems": Bool(true),
                        },
                    ],
                },
                "uniqueItems": Object {
                    "default": Bool(false),
                    "type": String("boolean"),
                },
            },
            "title": String("Validation vocabulary meta-schema"),
            "type": Array [
                String("object"),
                String("boolean"),
            ],
        },
        Url(
            Url {
                scheme: "https",
                cannot_be_a_base: false,
                username: "",
                password: None,
                host: Some(
                    Domain(
                        "json-schema.org",
                    ),
                ),
                port: None,
                path: "/draft/2020-12/schema",
                query: None,
                fragment: None,
            },
        ): Object {
            "$comment": String("This meta-schema also defines keywords that have appeared in previous drafts in order to prevent incompatible extensions as they remain in common use."),
            "$dynamicAnchor": String("meta"),
            "$id": String("https://json-schema.org/draft/2020-12/schema"),
            "$schema": String("https://json-schema.org/draft/2020-12/schema"),
            "$vocabulary": Object {
                "https://json-schema.org/draft/2020-12/vocab/applicator": Bool(true),
                "https://json-schema.org/draft/2020-12/vocab/content": Bool(true),
                "https://json-schema.org/draft/2020-12/vocab/core": Bool(true),
                "https://json-schema.org/draft/2020-12/vocab/format-annotation": Bool(true),
                "https://json-schema.org/draft/2020-12/vocab/meta-data": Bool(true),
                "https://json-schema.org/draft/2020-12/vocab/unevaluated": Bool(true),
                "https://json-schema.org/draft/2020-12/vocab/validation": Bool(true),
            },
            "allOf": Array [
                Object {
                    "$ref": String("meta/core"),
                },
                Object {
                    "$ref": String("meta/applicator"),
                },
                Object {
                    "$ref": String("meta/unevaluated"),
                },
                Object {
                    "$ref": String("meta/validation"),
                },
                Object {
                    "$ref": String("meta/meta-data"),
                },
                Object {
                    "$ref": String("meta/format-annotation"),
                },
                Object {
                    "$ref": String("meta/content"),
                },
            ],
            "properties": Object {
                "$recursiveAnchor": Object {
                    "$comment": String("\"$recursiveAnchor\" has been replaced by \"$dynamicAnchor\"."),
                    "$ref": String("meta/core#/$defs/anchorString"),
                    "deprecated": Bool(true),
                },
                "$recursiveRef": Object {
                    "$comment": String("\"$recursiveRef\" has been replaced by \"$dynamicRef\"."),
                    "$ref": String("meta/core#/$defs/uriReferenceString"),
                    "deprecated": Bool(true),
                },
                "definitions": Object {
                    "$comment": String("\"definitions\" has been replaced by \"$defs\"."),
                    "additionalProperties": Object {
                        "$dynamicRef": String("#meta"),
                    },
                    "default": Object {},
                    "deprecated": Bool(true),
                    "type": String("object"),
                },
                "dependencies": Object {
                    "$comment": String("\"dependencies\" has been split and replaced by \"dependentSchemas\" and \"dependentRequired\" in order to serve their differing semantics."),
                    "additionalProperties": Object {
                        "anyOf": Array [
                            Object {
                                "$dynamicRef": String("#meta"),
                            },
                            Object {
                                "$ref": String("meta/validation#/$defs/stringArray"),
                            },
                        ],
                    },
                    "default": Object {},
                    "deprecated": Bool(true),
                    "type": String("object"),
                },
            },
            "title": String("Core and Validation specifications meta-schema"),
            "type": Array [
                String("object"),
                String("boolean"),
            ],
        },
        Url(
            Url {
                scheme: "https",
                cannot_be_a_base: false,
                username: "",
                password: None,
                host: Some(
                    Domain(
                        "example.com",
                    ),
                ),
                port: None,
                path: "/schema.json",
                query: None,
                fragment: None,
            },
        ): Object {
            "type": String("string"),
        },
        Url(
            Url {
                scheme: "https",
                cannot_be_a_base: false,
                username: "",
                password: None,
                host: Some(
                    Domain(
                        "json-schema.org",
                    ),
                ),
                port: None,
                path: "/draft/2020-12/meta/core",
                query: None,
                fragment: None,
            },
        ): Object {
            "$defs": Object {
                "anchorString": Object {
                    "pattern": String("^[A-Za-z_][-A-Za-z0-9._]*$"),
                    "type": String("string"),
                },
                "uriReferenceString": Object {
                    "format": String("uri-reference"),
                    "type": String("string"),
                },
                "uriString": Object {
                    "format": String("uri"),
                    "type": String("string"),
                },
            },
            "$dynamicAnchor": String("meta"),
            "$id": String("https://json-schema.org/draft/2020-12/meta/core"),
            "$schema": String("https://json-schema.org/draft/2020-12/schema"),
            "$vocabulary": Object {
                "https://json-schema.org/draft/2020-12/vocab/core": Bool(true),
            },
            "properties": Object {
                "$anchor": Object {
                    "$ref": String("#/$defs/anchorString"),
                },
                "$comment": Object {
                    "type": String("string"),
                },
                "$defs": Object {
                    "additionalProperties": Object {
                        "$dynamicRef": String("#meta"),
                    },
                    "type": String("object"),
                },
                "$dynamicAnchor": Object {
                    "$ref": String("#/$defs/anchorString"),
                },
                "$dynamicRef": Object {
                    "$ref": String("#/$defs/uriReferenceString"),
                },
                "$id": Object {
                    "$comment": String("Non-empty fragments not allowed."),
                    "$ref": String("#/$defs/uriReferenceString"),
                    "pattern": String("^[^#]*#?$"),
                },
                "$ref": Object {
                    "$ref": String("#/$defs/uriReferenceString"),
                },
                "$schema": Object {
                    "$ref": String("#/$defs/uriString"),
                },
                "$vocabulary": Object {
                    "additionalProperties": Object {
                        "type": String("boolean"),
                    },
                    "propertyNames": Object {
                        "$ref": String("#/$defs/uriString"),
                    },
                    "type": String("object"),
                },
            },
            "title": String("Core vocabulary meta-schema"),
            "type": Array [
                String("object"),
                String("boolean"),
            ],
        },
        Url(
            Url {
                scheme: "https",
                cannot_be_a_base: false,
                username: "",
                password: None,
                host: Some(
                    Domain(
                        "json-schema.org",
                    ),
                ),
                port: None,
                path: "/draft/2020-12/meta/unevaluated",
                query: None,
                fragment: None,
            },
        ): Object {
            "$dynamicAnchor": String("meta"),
            "$id": String("https://json-schema.org/draft/2020-12/meta/unevaluated"),
            "$schema": String("https://json-schema.org/draft/2020-12/schema"),
            "$vocabulary": Object {
                "https://json-schema.org/draft/2020-12/vocab/unevaluated": Bool(true),
            },
            "properties": Object {
                "unevaluatedItems": Object {
                    "$dynamicRef": String("#meta"),
                },
                "unevaluatedProperties": Object {
                    "$dynamicRef": String("#meta"),
                },
            },
            "title": String("Unevaluated applicator vocabulary meta-schema"),
            "type": Array [
                String("object"),
                String("boolean"),
            ],
        },
        Url(
            Url {
                scheme: "https",
                cannot_be_a_base: false,
                username: "",
                password: None,
                host: Some(
                    Domain(
                        "json-schema.org",
                    ),
                ),
                port: None,
                path: "/draft/2020-12/meta/format-annotation",
                query: None,
                fragment: None,
            },
        ): Object {
            "$dynamicAnchor": String("meta"),
            "$id": String("https://json-schema.org/draft/2020-12/meta/format-annotation"),
            "$schema": String("https://json-schema.org/draft/2020-12/schema"),
            "$vocabulary": Object {
                "https://json-schema.org/draft/2020-12/vocab/format-annotation": Bool(true),
            },
            "properties": Object {
                "format": Object {
                    "type": String("string"),
                },
            },
            "title": String("Format vocabulary meta-schema for annotation results"),
            "type": Array [
                String("object"),
                String("boolean"),
            ],
        },
        Url(
            Url {
                scheme: "https",
                cannot_be_a_base: false,
                username: "",
                password: None,
                host: Some(
                    Domain(
                        "json-schema.org",
                    ),
                ),
                port: None,
                path: "/draft/2020-12/meta/format-assertion",
                query: None,
                fragment: None,
            },
        ): Object {
            "$dynamicAnchor": String("meta"),
            "$id": String("https://json-schema.org/draft/2020-12/meta/format-annotation"),
            "$schema": String("https://json-schema.org/draft/2020-12/schema"),
            "$vocabulary": Object {
                "https://json-schema.org/draft/2020-12/vocab/format-annotation": Bool(true),
            },
            "properties": Object {
                "format": Object {
                    "type": String("string"),
                },
            },
            "title": String("Format vocabulary meta-schema for annotation results"),
            "type": Array [
                String("object"),
                String("boolean"),
            ],
        },
        Url(
            Url {
                scheme: "https",
                cannot_be_a_base: false,
                username: "",
                password: None,
                host: Some(
                    Domain(
                        "json-schema.org",
                    ),
                ),
                port: None,
                path: "/draft/2020-12/meta/applicator",
                query: None,
                fragment: None,
            },
        ): Object {
            "$defs": Object {
                "schemaArray": Object {
                    "items": Object {
                        "$dynamicRef": String("#meta"),
                    },
                    "minItems": Number(1),
                    "type": String("array"),
                },
            },
            "$dynamicAnchor": String("meta"),
            "$id": String("https://json-schema.org/draft/2020-12/meta/applicator"),
            "$schema": String("https://json-schema.org/draft/2020-12/schema"),
            "$vocabulary": Object {
                "https://json-schema.org/draft/2020-12/vocab/applicator": Bool(true),
            },
            "properties": Object {
                "additionalProperties": Object {
                    "$dynamicRef": String("#meta"),
                },
                "allOf": Object {
                    "$ref": String("#/$defs/schemaArray"),
                },
                "anyOf": Object {
                    "$ref": String("#/$defs/schemaArray"),
                },
                "contains": Object {
                    "$dynamicRef": String("#meta"),
                },
                "dependentSchemas": Object {
                    "additionalProperties": Object {
                        "$dynamicRef": String("#meta"),
                    },
                    "default": Object {},
                    "type": String("object"),
                },
                "else": Object {
                    "$dynamicRef": String("#meta"),
                },
                "if": Object {
                    "$dynamicRef": String("#meta"),
                },
                "items": Object {
                    "$dynamicRef": String("#meta"),
                },
                "not": Object {
                    "$dynamicRef": String("#meta"),
                },
                "oneOf": Object {
                    "$ref": String("#/$defs/schemaArray"),
                },
                "patternProperties": Object {
                    "additionalProperties": Object {
                        "$dynamicRef": String("#meta"),
                    },
                    "default": Object {},
                    "propertyNames": Object {
                        "format": String("regex"),
                    },
                    "type": String("object"),
                },
                "prefixItems": Object {
                    "$ref": String("#/$defs/schemaArray"),
                },
                "properties": Object {
                    "additionalProperties": Object {
                        "$dynamicRef": String("#meta"),
                    },
                    "default": Object {},
                    "type": String("object"),
                },
                "propertyNames": Object {
                    "$dynamicRef": String("#meta"),
                },
                "then": Object {
                    "$dynamicRef": String("#meta"),
                },
            },
            "title": String("Applicator vocabulary meta-schema"),
            "type": Array [
                String("object"),
                String("boolean"),
            ],
        },
        Url(
            Url {
                scheme: "https",
                cannot_be_a_base: false,
                username: "",
                password: None,
                host: Some(
                    Domain(
                        "json-schema.org",
                    ),
                ),
                port: None,
                path: "/draft/2020-12/meta/meta-data",
                query: None,
                fragment: None,
            },
        ): Object {
            "$dynamicAnchor": String("meta"),
            "$id": String("https://json-schema.org/draft/2020-12/meta/meta-data"),
            "$schema": String("https://json-schema.org/draft/2020-12/schema"),
            "$vocabulary": Object {
                "https://json-schema.org/draft/2020-12/vocab/meta-data": Bool(true),
            },
            "properties": Object {
                "default": Bool(true),
                "deprecated": Object {
                    "default": Bool(false),
                    "type": String("boolean"),
                },
                "description": Object {
                    "type": String("string"),
                },
                "examples": Object {
                    "items": Bool(true),
                    "type": String("array"),
                },
                "readOnly": Object {
                    "default": Bool(false),
                    "type": String("boolean"),
                },
                "title": Object {
                    "type": String("string"),
                },
                "writeOnly": Object {
                    "default": Bool(false),
                    "type": String("boolean"),
                },
            },
            "title": String("Meta-data vocabulary meta-schema"),
            "type": Array [
                String("object"),
                String("boolean"),
            ],
        },
    },
    schemas: SlotMap {
        slots: [
            Slot {
                version: 0,
                next_free: 0,
            },
        ],
        free_head: 1,
        num_elems: 0,
        _k: PhantomData<fn(grill::schema::SchemaKey) -> grill::schema::SchemaKey>,
    },
    schema_lookup: {},
    dep_graph: DependencyGraph {
        ext_refs_graph: Graph {
            Ty: "Directed",
            node_count: 0,
            edge_count: 0,
            node weights: {},
            edge weights: {},
        },
        indexes: {},
    },
    ..
}