warning: /Users/chance/dev/grill/tests/Cargo.toml: unused manifest key: te
warning: unused imports: `Value`, `json`
 --> grill-core/src/visitor.rs:1:18
  |
1 | use serde_json::{json, Value};
  |                  ^^^^  ^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::collections::HashMap`
 --> grill-core/src/visitor.rs:2:5
  |
2 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `BuildHasherDefault`
 --> grill-core/src/keyword/cache.rs:3:25
  |
3 |     hash::{BuildHasher, BuildHasherDefault, Hasher},
  |                         ^^^^^^^^^^^^^^^^^^

warning: unused import: `fmt::Write`
 --> grill-core/src/schema/compiler.rs:3:5
  |
3 |     fmt::Write,
  |     ^^^^^^^^^^

warning: unused imports: `Level`, `instrument`
  --> grill-core/src/source.rs:22:15
   |
22 | use tracing::{instrument, Level};
   |               ^^^^^^^^^^  ^^^^^

warning: unused variable: `bytes`
   --> grill-core/src/keyword/cache.rs:261:25
    |
261 |     fn write(&mut self, bytes: &[u8]) {
    |                         ^^^^^ help: if this is intentional, prefix it with an underscore: `_bytes`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: method `print_sources` is never used
   --> grill-core/src/schema.rs:377:12
    |
368 | impl Schemas {
    | ------------ method in this implementation
...
377 |     pub fn print_sources(&self) {
    |            ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: `grill-core` (lib) generated 7 warnings (run `cargo fix --lib -p grill-core` to apply 6 suggestions)
   Compiling grill-test-builder v0.1.0 (/Users/chance/dev/grill/grill-test-builder)
warning: unused import: `NotUtf8Snafu`
 --> grill-test-builder/src/fs.rs:1:40
  |
1 | use crate::{Error, GlobSnafu, IoSnafu, NotUtf8Snafu};
  |                                        ^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `HashSet`, `iter::once`
 --> grill-test-builder/src/generate.rs:2:28
  |
2 |     collections::{HashMap, HashSet},
  |                            ^^^^^^^
...
6 |     iter::once,
  |     ^^^^^^^^^^

warning: unused variable: `suite_name`
   --> grill-test-builder/src/generate.rs:109:9
    |
109 |     let suite_name = &suite.snake_ident;
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_suite_name`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `base_uri`
   --> grill-test-builder/src/generate.rs:107:5
    |
107 |     base_uri: &AbsoluteUri,
    |     ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_base_uri`

warning: unused variable: `suite_snake`
   --> grill-test-builder/src/generate.rs:474:13
    |
474 |         let suite_snake = &suite.snake_ident;
    |             ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_suite_snake`

warning: unused variable: `schema`
   --> grill-test-builder/src/generate.rs:486:13
    |
486 |         let schema = self.schema.to_string();
    |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_schema`

warning: unused variable: `path`
   --> grill-test-builder/src/generate.rs:472:48
    |
472 |     fn generate(&self, i: usize, suite: &Name, path: &Path, ancestry: &[&Name]) -> TokenStream {
    |                                                ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `ancestry`
   --> grill-test-builder/src/generate.rs:472:61
    |
472 |     fn generate(&self, i: usize, suite: &Name, path: &Path, ancestry: &[&Name]) -> TokenStream {
    |                                                             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_ancestry`

warning: unused variable: `valid`
   --> grill-test-builder/src/generate.rs:514:13
    |
514 |             valid,
    |             ^^^^^ help: try ignoring the field: `valid: _`

warning: unused variable: `setup_fn`
   --> grill-test-builder/src/generate.rs:517:13
    |
517 |         let setup_fn = format_ident!("setup_{name}");
    |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_setup_fn`

warning: unused variable: `data`
   --> grill-test-builder/src/generate.rs:518:13
    |
518 |         let data = data.to_string();
    |             ^^^^ help: if this is intentional, prefix it with an underscore: `_data`

warning: unused variable: `suite`
   --> grill-test-builder/src/generate.rs:510:48
    |
510 |     fn generate(&self, i: usize, name: &Ident, suite: &Name) -> TokenStream {
    |                                                ^^^^^ help: if this is intentional, prefix it with an underscore: `_suite`

warning: field `snake_pathbuf` is never read
   --> grill-test-builder/src/generate.rs:227:5
    |
224 | struct Name {
    |        ---- field in this struct
...
227 |     snake_pathbuf: Utf8PathBuf,
    |     ^^^^^^^^^^^^^
    |
    = note: `Name` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis
    = note: `#[warn(dead_code)]` on by default

warning: `grill-test-builder` (lib) generated 13 warnings (run `cargo fix --lib -p grill-test-builder` to apply 12 suggestions)
warning: unused imports: `Utf8PathBuf`, `Utf8Path`
 --> grill-test-builder/src/main.rs:1:14
  |
1 | use camino::{Utf8Path, Utf8PathBuf};
  |              ^^^^^^^^  ^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `snafu::ResultExt`
 --> grill-test-builder/src/main.rs:3:5
  |
3 | use snafu::ResultExt;
  |     ^^^^^^^^^^^^^^^^

warning: unused variable: `overwrite`
 --> grill-test-builder/src/main.rs:8:25
  |
8 |     for (path, content, overwrite) in files {
  |                         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_overwrite`
  |
  = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `meta`
 --> grill-test-builder/src/main.rs:9:13
  |
9 |         let meta = std::fs::metadata(&path);
  |             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: unused variable: `file_name`
  --> grill-test-builder/src/main.rs:10:13
   |
10 |         let file_name = path.file_name().unwrap();
   |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_file_name`

warning: `grill-test-builder` (bin "grill-test-builder") generated 5 warnings (run `cargo fix --bin "grill-test-builder"` to apply 5 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.85s
     Running `target/debug/grill-test-builder`
[grill-test-builder/src/generate.rs:308] &dialect = Name {
    string: "draft7",
    snake_ident: Ident(
        draft7,
    ),
    snake_pathbuf: "draft7",
    pascal_ident: Ident(
        Draft7,
    ),
}
[grill-test-builder/src/generate.rs:308] &dialect = Name {
    string: "draft7",
    snake_ident: Ident(
        draft7,
    ),
    snake_pathbuf: "draft7",
    pascal_ident: Ident(
        Draft7,
    ),
}
[grill-test-builder/src/generate.rs:308] &dialect = Name {
    string: "draft7",
    snake_ident: Ident(
        draft7,
    ),
    snake_pathbuf: "draft7",
    pascal_ident: Ident(
        Draft7,
    ),
}
[grill-test-builder/src/generate.rs:308] &dialect = Name {
    string: "draft2020-12",
    snake_ident: Ident(
        draft2020_12,
    ),
    snake_pathbuf: "draft2020_12",
    pascal_ident: Ident(
        Draft202012,
    ),
}
[grill-test-builder/src/generate.rs:308] &dialect = Name {
    string: "draft2020-12",
    snake_ident: Ident(
        draft2020_12,
    ),
    snake_pathbuf: "draft2020_12",
    pascal_ident: Ident(
        Draft202012,
    ),
}
[grill-test-builder/src/generate.rs:308] &dialect = Name {
    string: "draft2020-12",
    snake_ident: Ident(
        draft2020_12,
    ),
    snake_pathbuf: "draft2020_12",
    pascal_ident: Ident(
        Draft202012,
    ),
}
