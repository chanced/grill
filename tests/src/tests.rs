mod property_names_validation {
    #[tokio::test]
    fn test_all_property_names_valid() {
        #[doc = r"    let description = #description;"]
        #[doc = r"    let data = match serde_json::from_str(#data) {"]
        #[doc = r"        Ok(data) => data,"]
        #[doc = r#"        Err(err) => panic!("failed to parse data for {description} \n caused by:\n\n{err:?}"),"#]
        #[doc = r"    };"]
        #[doc = r"    let key = match key().await {"]
        #[doc = r"        Ok(key) => key,"]
        #[doc = r#"        Err(err) => panic!("failed to compile schema for {description} \n caused by:\n\n{err:?}"),"#]
        #[doc = r"    }"]
        #[doc = r"    let test = Test{"]
        #[doc = r"        schema_key: key,"]
        #[doc = r"        description: #description,"]
        #[doc = r"        data: data,"]
        #[doc = r"        valid: #valid"]
        #[doc = r"    };"]
        #[doc = r"    let mut interrogator = interrogator().await;"]
        #[doc = r"    let builder = RUNNER.#setup_fn(&mut builder, &test);"]
        #[doc = r"    let result = interrogator.evaluate(Structure::Flag, key,  &data);"]
        #[doc = r#"    assert_eq!(result.valid, valid, "{description}");"#]
        struct X;
    }
    #[tokio::test]
    fn test_some_property_names_invalid() {
        #[doc = r"    let description = #description;"]
        #[doc = r"    let data = match serde_json::from_str(#data) {"]
        #[doc = r"        Ok(data) => data,"]
        #[doc = r#"        Err(err) => panic!("failed to parse data for {description} \n caused by:\n\n{err:?}"),"#]
        #[doc = r"    };"]
        #[doc = r"    let key = match key().await {"]
        #[doc = r"        Ok(key) => key,"]
        #[doc = r#"        Err(err) => panic!("failed to compile schema for {description} \n caused by:\n\n{err:?}"),"#]
        #[doc = r"    }"]
        #[doc = r"    let test = Test{"]
        #[doc = r"        schema_key: key,"]
        #[doc = r"        description: #description,"]
        #[doc = r"        data: data,"]
        #[doc = r"        valid: #valid"]
        #[doc = r"    };"]
        #[doc = r"    let mut interrogator = interrogator().await;"]
        #[doc = r"    let builder = RUNNER.#setup_fn(&mut builder, &test);"]
        #[doc = r"    let result = interrogator.evaluate(Structure::Flag, key,  &data);"]
        #[doc = r#"    assert_eq!(result.valid, valid, "{description}");"#]
        struct X;
    }
    #[tokio::test]
    fn test_object_without_properties_is_valid() {
        #[doc = r"    let description = #description;"]
        #[doc = r"    let data = match serde_json::from_str(#data) {"]
        #[doc = r"        Ok(data) => data,"]
        #[doc = r#"        Err(err) => panic!("failed to parse data for {description} \n caused by:\n\n{err:?}"),"#]
        #[doc = r"    };"]
        #[doc = r"    let key = match key().await {"]
        #[doc = r"        Ok(key) => key,"]
        #[doc = r#"        Err(err) => panic!("failed to compile schema for {description} \n caused by:\n\n{err:?}"),"#]
        #[doc = r"    }"]
        #[doc = r"    let test = Test{"]
        #[doc = r"        schema_key: key,"]
        #[doc = r"        description: #description,"]
        #[doc = r"        data: data,"]
        #[doc = r"        valid: #valid"]
        #[doc = r"    };"]
        #[doc = r"    let mut interrogator = interrogator().await;"]
        #[doc = r"    let builder = RUNNER.#setup_fn(&mut builder, &test);"]
        #[doc = r"    let result = interrogator.evaluate(Structure::Flag, key,  &data);"]
        #[doc = r#"    assert_eq!(result.valid, valid, "{description}");"#]
        struct X;
    }
    #[tokio::test]
    fn test_ignores_arrays() {
        #[doc = r"    let description = #description;"]
        #[doc = r"    let data = match serde_json::from_str(#data) {"]
        #[doc = r"        Ok(data) => data,"]
        #[doc = r#"        Err(err) => panic!("failed to parse data for {description} \n caused by:\n\n{err:?}"),"#]
        #[doc = r"    };"]
        #[doc = r"    let key = match key().await {"]
        #[doc = r"        Ok(key) => key,"]
        #[doc = r#"        Err(err) => panic!("failed to compile schema for {description} \n caused by:\n\n{err:?}"),"#]
        #[doc = r"    }"]
        #[doc = r"    let test = Test{"]
        #[doc = r"        schema_key: key,"]
        #[doc = r"        description: #description,"]
        #[doc = r"        data: data,"]
        #[doc = r"        valid: #valid"]
        #[doc = r"    };"]
        #[doc = r"    let mut interrogator = interrogator().await;"]
        #[doc = r"    let builder = RUNNER.#setup_fn(&mut builder, &test);"]
        #[doc = r"    let result = interrogator.evaluate(Structure::Flag, key,  &data);"]
        #[doc = r#"    assert_eq!(result.valid, valid, "{description}");"#]
        struct X;
    }
    #[tokio::test]
    fn test_ignores_strings() {
        #[doc = r"    let description = #description;"]
        #[doc = r"    let data = match serde_json::from_str(#data) {"]
        #[doc = r"        Ok(data) => data,"]
        #[doc = r#"        Err(err) => panic!("failed to parse data for {description} \n caused by:\n\n{err:?}"),"#]
        #[doc = r"    };"]
        #[doc = r"    let key = match key().await {"]
        #[doc = r"        Ok(key) => key,"]
        #[doc = r#"        Err(err) => panic!("failed to compile schema for {description} \n caused by:\n\n{err:?}"),"#]
        #[doc = r"    }"]
        #[doc = r"    let test = Test{"]
        #[doc = r"        schema_key: key,"]
        #[doc = r"        description: #description,"]
        #[doc = r"        data: data,"]
        #[doc = r"        valid: #valid"]
        #[doc = r"    };"]
        #[doc = r"    let mut interrogator = interrogator().await;"]
        #[doc = r"    let builder = RUNNER.#setup_fn(&mut builder, &test);"]
        #[doc = r"    let result = interrogator.evaluate(Structure::Flag, key,  &data);"]
        #[doc = r#"    assert_eq!(result.valid, valid, "{description}");"#]
        struct X;
    }
    #[tokio::test]
    fn test_ignores_other_non_objects() {
        #[doc = r"    let description = #description;"]
        #[doc = r"    let data = match serde_json::from_str(#data) {"]
        #[doc = r"        Ok(data) => data,"]
        #[doc = r#"        Err(err) => panic!("failed to parse data for {description} \n caused by:\n\n{err:?}"),"#]
        #[doc = r"    };"]
        #[doc = r"    let key = match key().await {"]
        #[doc = r"        Ok(key) => key,"]
        #[doc = r#"        Err(err) => panic!("failed to compile schema for {description} \n caused by:\n\n{err:?}"),"#]
        #[doc = r"    }"]
        #[doc = r"    let test = Test{"]
        #[doc = r"        schema_key: key,"]
        #[doc = r"        description: #description,"]
        #[doc = r"        data: data,"]
        #[doc = r"        valid: #valid"]
        #[doc = r"    };"]
        #[doc = r"    let mut interrogator = interrogator().await;"]
        #[doc = r"    let builder = RUNNER.#setup_fn(&mut builder, &test);"]
        #[doc = r"    let result = interrogator.evaluate(Structure::Flag, key,  &data);"]
        #[doc = r#"    assert_eq!(result.valid, valid, "{description}");"#]
        struct X;
    }
}
mod property_names_with_boolean_schema_true {
    #[tokio::test]
    fn test_object_with_any_properties_is_valid() {
        #[doc = r"    let description = #description;"]
        #[doc = r"    let data = match serde_json::from_str(#data) {"]
        #[doc = r"        Ok(data) => data,"]
        #[doc = r#"        Err(err) => panic!("failed to parse data for {description} \n caused by:\n\n{err:?}"),"#]
        #[doc = r"    };"]
        #[doc = r"    let key = match key().await {"]
        #[doc = r"        Ok(key) => key,"]
        #[doc = r#"        Err(err) => panic!("failed to compile schema for {description} \n caused by:\n\n{err:?}"),"#]
        #[doc = r"    }"]
        #[doc = r"    let test = Test{"]
        #[doc = r"        schema_key: key,"]
        #[doc = r"        description: #description,"]
        #[doc = r"        data: data,"]
        #[doc = r"        valid: #valid"]
        #[doc = r"    };"]
        #[doc = r"    let mut interrogator = interrogator().await;"]
        #[doc = r"    let builder = RUNNER.#setup_fn(&mut builder, &test);"]
        #[doc = r"    let result = interrogator.evaluate(Structure::Flag, key,  &data);"]
        #[doc = r#"    assert_eq!(result.valid, valid, "{description}");"#]
        struct X;
    }
    #[tokio::test]
    fn test_empty_object_is_valid() {
        #[doc = r"    let description = #description;"]
        #[doc = r"    let data = match serde_json::from_str(#data) {"]
        #[doc = r"        Ok(data) => data,"]
        #[doc = r#"        Err(err) => panic!("failed to parse data for {description} \n caused by:\n\n{err:?}"),"#]
        #[doc = r"    };"]
        #[doc = r"    let key = match key().await {"]
        #[doc = r"        Ok(key) => key,"]
        #[doc = r#"        Err(err) => panic!("failed to compile schema for {description} \n caused by:\n\n{err:?}"),"#]
        #[doc = r"    }"]
        #[doc = r"    let test = Test{"]
        #[doc = r"        schema_key: key,"]
        #[doc = r"        description: #description,"]
        #[doc = r"        data: data,"]
        #[doc = r"        valid: #valid"]
        #[doc = r"    };"]
        #[doc = r"    let mut interrogator = interrogator().await;"]
        #[doc = r"    let builder = RUNNER.#setup_fn(&mut builder, &test);"]
        #[doc = r"    let result = interrogator.evaluate(Structure::Flag, key,  &data);"]
        #[doc = r#"    assert_eq!(result.valid, valid, "{description}");"#]
        struct X;
    }
}
mod property_names_with_boolean_schema_false {
    #[tokio::test]
    fn test_object_with_any_properties_is_invalid() {
        #[doc = r"    let description = #description;"]
        #[doc = r"    let data = match serde_json::from_str(#data) {"]
        #[doc = r"        Ok(data) => data,"]
        #[doc = r#"        Err(err) => panic!("failed to parse data for {description} \n caused by:\n\n{err:?}"),"#]
        #[doc = r"    };"]
        #[doc = r"    let key = match key().await {"]
        #[doc = r"        Ok(key) => key,"]
        #[doc = r#"        Err(err) => panic!("failed to compile schema for {description} \n caused by:\n\n{err:?}"),"#]
        #[doc = r"    }"]
        #[doc = r"    let test = Test{"]
        #[doc = r"        schema_key: key,"]
        #[doc = r"        description: #description,"]
        #[doc = r"        data: data,"]
        #[doc = r"        valid: #valid"]
        #[doc = r"    };"]
        #[doc = r"    let mut interrogator = interrogator().await;"]
        #[doc = r"    let builder = RUNNER.#setup_fn(&mut builder, &test);"]
        #[doc = r"    let result = interrogator.evaluate(Structure::Flag, key,  &data);"]
        #[doc = r#"    assert_eq!(result.valid, valid, "{description}");"#]
        struct X;
    }
    #[tokio::test]
    fn test_empty_object_is_valid() {
        #[doc = r"    let description = #description;"]
        #[doc = r"    let data = match serde_json::from_str(#data) {"]
        #[doc = r"        Ok(data) => data,"]
        #[doc = r#"        Err(err) => panic!("failed to parse data for {description} \n caused by:\n\n{err:?}"),"#]
        #[doc = r"    };"]
        #[doc = r"    let key = match key().await {"]
        #[doc = r"        Ok(key) => key,"]
        #[doc = r#"        Err(err) => panic!("failed to compile schema for {description} \n caused by:\n\n{err:?}"),"#]
        #[doc = r"    }"]
        #[doc = r"    let test = Test{"]
        #[doc = r"        schema_key: key,"]
        #[doc = r"        description: #description,"]
        #[doc = r"        data: data,"]
        #[doc = r"        valid: #valid"]
        #[doc = r"    };"]
        #[doc = r"    let mut interrogator = interrogator().await;"]
        #[doc = r"    let builder = RUNNER.#setup_fn(&mut builder, &test);"]
        #[doc = r"    let result = interrogator.evaluate(Structure::Flag, key,  &data);"]
        #[doc = r#"    assert_eq!(result.valid, valid, "{description}");"#]
        struct X;
    }
}
